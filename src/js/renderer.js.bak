// DOM hazır olduğunda çalışacak fonksiyon
document.addEventListener('DOMContentLoaded', () => {
  // Navbar geçişleri için event listener
  setupNavigation();
  
  // Kaydırma butonları için event listener
  setupSliderNavigation();
  
  // İçerik kartları için event listener
  setupContentCards();
  
  // Yeni ekle butonu için event listener
  setupAddButton();
  
  // Arama fonksiyonu
  setupSearch();
});

// Sayfa içeriği - farklı kategoriler için içerik konteynerları
const pageContents = {
  'Anasayfa': `
    <div class="category">
      <h2 class="category-title">Önerilen İçerikler</h2>
      <div class="content-section">
        <h3 class="section-title">En Son Eklenenler</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>
    </div>
  `,
  'Film': `
    <div class="category">
      <h2 class="category-title">Film</h2>

      <!-- İzleniyor Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzleniyor</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>

      <!-- İzlenecek Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzlenecek</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>

      <!-- İzlendi Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzlendi</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>
    </div>
  `,
  'Dizi': `
    <div class="category">
      <h2 class="category-title">Dizi</h2>

      <!-- İzleniyor Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzleniyor</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>

      <!-- İzlenecek Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzlenecek</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>

      <!-- İzlendi Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzlendi</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>
    </div>
  `,
  'Anime': `
    <div class="category">
      <h2 class="category-title">Anime</h2>

      <!-- İzleniyor Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzleniyor</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>

      <!-- İzlenecek Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzlenecek</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>

      <!-- İzlendi Bölümü -->
      <div class="content-section">
        <h3 class="section-title">İzlendi</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>
    </div>
  `,
  'İzleme Listem': `
    <div class="category">
      <h2 class="category-title">İzleme Listem</h2>
      <div class="content-section">
        <h3 class="section-title">Tüm İçerikler</h3>
        <div class="content-slider">
          <div class="slider-content">
            <!-- API'den dinamik olarak doldurulacak -->
          </div>
          <div class="slider-navigation">
            <div class="nav-button">←</div>
            <div class="nav-button">→</div>
          </div>
        </div>
      </div>
    </div>
  `,
  'Ayarlar': `
    <div class="settings-container">
      <h2 class="category-title">Ayarlar</h2>
      <div class="settings-section">
        <div class="settings-item">
          <h3>Tema</h3>
          <div class="theme-selector">
            <button class="theme-button active" data-theme="dark">Karanlık</button>
            <button class="theme-button" data-theme="light">Aydınlık</button>
          </div>
        </div>
        <div class="settings-item">
          <h3>Bildirimler</h3>
          <div class="notification-settings">
            <label class="switch">
              <input type="checkbox" checked>
              <span class="slider round"></span>
            </label>
            <span>Bildirimleri Etkinleştir</span>
          </div>
        </div>
        <div class="settings-item">
          <h3>Veri Yönetimi</h3>
          <button class="settings-button">Verileri Dışa Aktar</button>
          <button class="settings-button">Verileri İçe Aktar</button>
        </div>
      </div>
    </div>
  `
};

// Navbar item tıklandığında aktif sınıfı değiştirme ve sayfa içeriğini güncelleme
function setupNavigation() {
  const navItems = document.querySelectorAll('.navbar-item');
  const mainContent = document.querySelector('.main-content');
  
  navItems.forEach(item => {
    item.addEventListener('click', () => {
      // Aktif sınıfını kaldır
      navItems.forEach(nav => nav.classList.remove('active'));
      
      // Tıklanan öğeye aktif sınıfı ekle
      item.classList.add('active');
      
      // Sayfa içeriğini güncelle
      const pageContent = pageContents[item.textContent] || '';
      mainContent.innerHTML = pageContent;
      
      // Yeni eklenen içerikler için event listenerları tekrar kur
      setupSliderNavigation();
      setupContentCards();
      
      // Ayarlar sayfası için özel işlevler
      if (item.textContent === 'Ayarlar') {
        setupSettingsPage();
      }
    });
  });
}

// Kaydırma butonları için işlev
function setupSliderNavigation() {
  const sliders = document.querySelectorAll('.content-slider');
  
  sliders.forEach(slider => {
    const content = slider.querySelector('.slider-content');
    const prevBtn = slider.querySelector('.nav-button:first-child');
    const nextBtn = slider.querySelector('.nav-button:last-child');
    
    if (!content || !prevBtn || !nextBtn) return;
    
    // Kaydırma miktarını hesapla (card genişliği + margin)
    const cardWidth = 180; // İçerik kartının genişliği
    const cardMargin = 24; // İçerik kartının sağ margin değeri (1.5rem)
    const scrollAmount = cardWidth + cardMargin;
    
    // İleri butonuna tıklandığında
    nextBtn.addEventListener('click', (e) => {
      e.stopPropagation(); // Event propagation'ı durdur
      content.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    });
    
    // Geri butonuna tıklandığında
    prevBtn.addEventListener('click', (e) => {
      e.stopPropagation(); // Event propagation'ı durdur
      content.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
    });
    
    // Scroll durumuna göre butonları göster/gizle
    content.addEventListener('scroll', () => {
      // Scroll pozisyonunu kontrol et
      const isAtStart = content.scrollLeft === 0;
      const isAtEnd = content.scrollLeft + content.clientWidth >= content.scrollWidth - 5;
      
      // Sol butonu göster/gizle
      prevBtn.style.opacity = isAtStart ? '0.5' : '1';
      prevBtn.style.cursor = isAtStart ? 'default' : 'pointer';
      
      // Sağ butonu göster/gizle
      nextBtn.style.opacity = isAtEnd ? '0.5' : '1';
      nextBtn.style.cursor = isAtEnd ? 'default' : 'pointer';
    });
    
    // Sayfa yüklendiğinde scroll durumunu kontrol et
    setTimeout(() => {
      // Yapay bir scroll eventi tetikle
      content.dispatchEvent(new Event('scroll'));
    }, 100);
  });
}

// İçerik kartları için detay görünümü
function setupContentCards() {
  const contentCards = document.querySelectorAll('.content-card');
  
  contentCards.forEach(card => {
    card.addEventListener('click', () => {
      const contentId = card.getAttribute('data-id');
      const contentName = card.textContent;
      
      // İçerik detayları modalını oluştur
      showContentDetails(contentId, contentName);
    });
  });
}

// İçerik detaylarını gösteren modal
function showContentDetails(id, name) {
  // Eğer zaten bir modal varsa kaldır
  const existingModal = document.querySelector('.modal-container');
  if (existingModal) {
    existingModal.remove();
  }
  
  // Yeni modal oluştur
  const modal = document.createElement('div');
  modal.className = 'modal-container';
  
  modal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h2>${name}</h2>
        <button class="close-button">✕</button>
      </div>
      <div class="modal-body">
        <div class="content-details">
          <div class="content-image">İçerik Görseli</div>
          <div class="content-info">
            <p><strong>ID:</strong> ${id}</p>
            <p><strong>Tür:</strong> ${id < 20 ? 'Film' : id < 40 ? 'Dizi' : 'Anime'}</p>
            <p><strong>Yayın Yılı:</strong> 2023</p>
            <p><strong>Durum:</strong> ${
              id % 3 === 0 ? 'İzlendi' : 
              id % 3 === 1 ? 'İzleniyor' : 'İzlenecek'
            }</p>
          </div>
        </div>
        <div class="content-actions">
          <button class="action-button ${id % 3 === 0 ? 'active' : ''}" data-status="watched">İzlendi</button>
          <button class="action-button ${id % 3 === 1 ? 'active' : ''}" data-status="watching">İzleniyor</button>
          <button class="action-button ${id % 3 === 2 ? 'active' : ''}" data-status="to-watch">İzlenecek</button>
        </div>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // Modal kapatma butonu
  const closeButton = modal.querySelector('.close-button');
  closeButton.addEventListener('click', () => {
    modal.remove();
  });
  
  // Modal dışına tıklanınca kapatma
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
  
  // İzleme durumu butonları
  const actionButtons = modal.querySelectorAll('.action-button');
  actionButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Aktif sınıfını tümünden kaldır
      actionButtons.forEach(btn => btn.classList.remove('active'));
      // Tıklanan butona aktif sınıfı ekle
      button.classList.add('active');
      
      // İzleme durumunu güncelle
      const status = button.getAttribute('data-status');
      console.log(`İçerik ${id} için durum güncellendi: ${status}`);
      
      // Burada veritabanı güncelleme işlemleri yapılacak
    });
  });
}

// Yeni içerik ekleme paneli
function setupAddButton() {
  const addButton = document.querySelector('.add-button');
  
  if (addButton) {
    // Panel açık mı kontrolü için değişken
    let isAddPanelOpen = false;
    let addPanel = null;
    
    // Butona tıklandığında
    addButton.addEventListener('click', () => {
      // Panel açıksa kapat, değilse aç
      if (isAddPanelOpen && addPanel) {
        addPanel.remove();
        isAddPanelOpen = false;
        addButton.classList.remove('active');
      } else {
        // Yeni içerik ekleme panelini oluştur
        addPanel = document.createElement('div');
        addPanel.className = 'add-panel';
        
        addPanel.innerHTML = `
          <div class="add-panel-header">
            <h3>İçerik Ara</h3>
          </div>
          <div class="add-panel-body">
            <div class="search-form">
              <input type="text" id="add-search-input" placeholder="Film, dizi veya anime ara...">
              <div class="content-type-filters">
                <label class="checkbox-label">
                  <input type="checkbox" id="filter-movie" checked> Film
                </label>
                <label class="checkbox-label">
                  <input type="checkbox" id="filter-series" checked> Dizi
                </label>
                <label class="checkbox-label">
                  <input type="checkbox" id="filter-anime" checked> Anime
                </label>
              </div>
              <button id="add-search-button">Ara</button>
            </div>
            <div class="add-search-results"></div>
          </div>
        `;
        
        // Paneli ekle
        document.body.appendChild(addPanel);
        isAddPanelOpen = true;
        addButton.classList.add('active');
        
        // Arama inputuna odaklan
        setTimeout(() => {
          const searchInput = document.getElementById('add-search-input');
          if (searchInput) searchInput.focus();
        }, 100);
        
        // Arama butonu event listener
        const searchButton = document.getElementById('add-search-button');
        if (searchButton) {
          searchButton.addEventListener('click', () => {
            performAddSearch();
          });
        }
        
        // Arama input enter tuşu dinleme
        const searchInput = document.getElementById('add-search-input');
        if (searchInput) {
          searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
              performAddSearch();
            }
          });
        }
      }
    });
    
    // Döküman tıklamalarını dinle, panel dışına tıklandığında kapat
    document.addEventListener('click', (e) => {
      if (isAddPanelOpen && addPanel && !addPanel.contains(e.target) && e.target !== addButton) {
        addPanel.remove();
        isAddPanelOpen = false;
        addButton.classList.remove('active');
      }
    });
  }
}

// Arama fonksiyonu
async function performAddSearch() {
  const searchInput = document.querySelector('.add-form .search-input');
  const searchTerm = searchInput.value.trim();
  const searchType = document.querySelector('.add-form .search-type-select').value;
  
  if (!searchTerm) {
    return;
  }
  
  // Yükleniyor göster
  showLoading('Aranıyor...');
  
  // API mevcut mu kontrol et
  if (!window.apiService) {
    throw new Error('API servisi bulunamadı');
  }
  
  try {
    // Film araması
    if (searchType === 'movie' || searchType === 'all') {
      const movieResults = await window.apiService.searchOmdb(searchTerm, 'movie');
      console.log('Film sonuçları:', movieResults);
      
      if (movieResults && movieResults.items && movieResults.items.length > 0) {
        displayAddSearchResults(searchTerm, movieResults.items);
        hideLoading();
        return;
      }
    }
    
    // Dizi araması
    if (searchType === 'series' || searchType === 'all') {
      const seriesResults = await window.apiService.searchOmdb(searchTerm, 'series');
      console.log('Dizi sonuçları:', seriesResults);
      
      if (seriesResults && seriesResults.items && seriesResults.items.length > 0) {
        displayAddSearchResults(searchTerm, seriesResults.items);
        hideLoading();
        return;
      }
    }
    
    // Anime araması
    if (searchType === 'anime' || searchType === 'all') {
      const animeResults = await window.apiService.searchAnime(searchTerm);
      console.log('Anime sonuçları:', animeResults);
      
      if (animeResults && animeResults.items && animeResults.items.length > 0) {
        displayAddSearchResults(searchTerm, animeResults.items);
        hideLoading();
        return;
      }
    }
    
    // Sonuç bulunamadıysa
    hideLoading();
    
    const resultsContainer = document.querySelector('.add-form .search-results');
    resultsContainer.innerHTML = `
      <div class="no-results">
        <p>"${searchTerm}" için sonuç bulunamadı.</p>
      </div>
    `;
  } catch (error) {
    console.error('Arama hatası:', error);
    hideLoading();
    
    const resultsContainer = document.querySelector('.add-form .search-results');
    resultsContainer.innerHTML = `
      <div class="error-message">
        <p>Arama sırasında bir hata oluştu.</p>
        <p>Hata: ${error.message}</p>
      </div>
    `;
  }
}

// Arama sonuçlarını görüntüle
function displayAddSearchResults(searchTerm, results) {
  const searchResultsContainer = document.querySelector('.add-search-results');
  if (!searchResultsContainer) return;
  
  // Sonuç yoksa
  if (!results || !results.items || results.items.length === 0) {
    searchResultsContainer.innerHTML = `
      <div class="no-results">
        <p>"${searchTerm}" için sonuç bulunamadı.</p>
      </div>
    `;
    return;
  }
  
  // Sonuçları HTML olarak hazırla
  let html = `<div class="search-results-header">
    <h4>"${searchTerm}" için ${results.items.length} sonuç bulundu</h4>
  </div>
  <div class="search-results-grid">`;
  
  results.items.forEach(item => {
    // Poster URL'i
    const posterUrl = item.poster || item.image || '../assets/no-image.png';
    
    // İçerik tipi
    let contentType = '';
    if (item.type === 'movie') contentType = 'Film';
    else if (item.type === 'series') contentType = 'Dizi';
    else if (item.type === 'anime') contentType = 'Anime';
    
    html += `
      <div class="search-result-card" data-id="${item.id}" data-type="${item.type || 'unknown'}">
        <div class="result-poster" style="background-image: url('${posterUrl}')"></div>
        <div class="result-info">
          <h4 class="result-title">${item.title}</h4>
          <div class="result-meta">
            <span class="result-year">${item.year || ''}</span>
            ${contentType ? `<span class="result-type">${contentType}</span>` : ''}
          </div>
          <button class="add-to-list-button" data-id="${item.id}" data-type="${item.type || 'unknown'}">Listeme Ekle</button>
        </div>
      </div>
    `;
  });
  
  html += '</div>';
  
  // Sonuçları göster
  searchResultsContainer.innerHTML = html;
  
  // Listeme ekle butonları için event listener
  const addButtons = searchResultsContainer.querySelectorAll('.add-to-list-button');
  addButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      const contentId = e.target.getAttribute('data-id');
      const contentType = e.target.getAttribute('data-type');
      
      // API üzerinden içeriği izleme listesine ekle
      if (window.apiService && window.apiService.addToWatchlist) {
        window.apiService.addToWatchlist(contentId, contentType, 'to-watch')
          .then(() => {
            // Başarılı mesajı göster
            alert(`İçerik listeye eklendi!`);
            // Buton metnini değiştir
            e.target.textContent = 'Eklendi';
            e.target.disabled = true;
          })
          .catch(error => {
            console.error('İçerik eklenirken hata:', error);
            alert('İçerik eklenirken bir hata oluştu!');
          });
      } else {
        console.log('İzleme listesine eklendi:', { id: contentId, type: contentType });
        // Buton metnini değiştir
        e.target.textContent = 'Eklendi';
        e.target.disabled = true;
      }
    });
  });
}

// Arama fonksiyonu
function setupSearch() {
  const searchInput = document.querySelector('.search-bar input');
  
  if (searchInput) {
    let searchTimeout;
    
    searchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.trim().toLowerCase();
      
      if (searchTerm.length < 2) return; // En az 2 karakter gerekli
      
      // Önceki zamanlayıcıyı temizle
      clearTimeout(searchTimeout);
      
      // Arama sonucu 500ms sonra göster (inputta yazmayı bitirsin diye)
      searchTimeout = setTimeout(async () => {
        if (searchTerm === searchInput.value.trim().toLowerCase() && searchTerm.length >= 2) {
          // API kullanılabilirse API ile arama yap
          if (window.apiService) {
            try {
              // Arama yaparken bir yükleniyor göstergesi ekle
              showLoading('Aranıyor...');
              
              // Aktif sekmeye göre arama türünü belirle
              const activeNavItem = document.querySelector('.navbar-item.active');
              let searchType = 'all';
              
              if (activeNavItem) {
                const navText = activeNavItem.textContent.toLowerCase();
                if (navText === 'film') searchType = 'movie';
                else if (navText === 'dizi') searchType = 'series';
                else if (navText === 'anime') searchType = 'anime';
              }
              
              // API ile arama yap
              const results = await window.apiService.searchContent(searchTerm, searchType);
              
              // Yükleniyor göstergesini kaldır
              hideLoading();
              
              // Sonuçları göster
              showApiSearchResults(searchTerm, results, searchType);
            } catch (error) {
              console.error('API araması sırasında hata:', error);
              hideLoading();
              
              // API hatası durumunda demo sonuçlar göster
              showSearchResults(searchTerm);
            }
          } else {
            // API mevcut değilse demo sonuçlar göster
            showSearchResults(searchTerm);
          }
        }
      }, 500);
    });
  }
}

// Yükleniyor göstergesi göster
function showLoading(message = 'Yükleniyor...') {
  // Eğer zaten varsa eski yükleniyor göstergesini kaldır
  hideLoading();
  
  const loader = document.createElement('div');
  loader.className = 'loading-indicator';
  loader.innerHTML = `
    <div class="loading-spinner"></div>
    <div class="loading-message">${message}</div>
  `;
  
  document.body.appendChild(loader);
}

// Yükleniyor göstergesini kaldır
function hideLoading() {
  const existingLoader = document.querySelector('.loading-indicator');
  if (existingLoader) {
    existingLoader.remove();
  }
}

// API'den gelen arama sonuçlarını göster
function showApiSearchResults(searchTerm, results, type) {
  // Arama sonucu sayfasını oluştur
  const mainContent = document.querySelector('.main-content');
  
  // Sonuç yoksa
  if (!results || !results.items || results.items.length === 0) {
    mainContent.innerHTML = `
      <div class="category">
        <h2 class="category-title">"${searchTerm}" için arama sonuçları</h2>
        <div class="no-results">
          <p>Arama sonucu bulunamadı. Farklı anahtar kelimeler deneyebilirsiniz.</p>
        </div>
      </div>
    `;
    return;
  }
  
  // Tür başlığı için
  let typeTitle = '';
  if (type === 'movie') typeTitle = 'Filmler';
  else if (type === 'series') typeTitle = 'Diziler';
  else if (type === 'anime') typeTitle = 'Animeler';
  else typeTitle = 'Tüm Sonuçlar';
  
  // Sonuçları görüntüle
  mainContent.innerHTML = `
    <div class="category">
      <h2 class="category-title">"${searchTerm}" için arama sonuçları</h2>
      
      <div class="content-section">
        <h3 class="section-title">${typeTitle}</h3>
        <div class="search-results">
          ${formatApiResults(results.items)}
        </div>
      </div>
    </div>
  `;
  
  // Sonuçlar için event listenerları kur
  setupContentCards();
}

// API sonuçlarını HTML'e dönüştür
function formatApiResults(items) {
  if (!items || items.length === 0) {
    return '<div class="no-results">Sonuç bulunamadı</div>';
  }
  
  let html = '';
  
  items.forEach(item => {
    // Resim URL'i
    const posterUrl = item.poster || item.image || '../assets/no-image.png';
    
    // İçerik tipi
    let contentType = '';
    if (item.type === 'movie') contentType = 'Film';
    else if (item.type === 'series') contentType = 'Dizi';
    else if (item.type === 'anime') contentType = 'Anime';
    
    html += `
      <div class="content-card api-content" data-id="${item.id}" data-type="${item.type || 'unknown'}">
        <div class="card-poster" style="background-image: url('${posterUrl}')"></div>
        <div class="card-info">
          <h4 class="card-title">${item.title}</h4>
          <div class="card-meta">
            <span class="card-year">${item.year || ''}</span>
            ${contentType ? `<span class="card-type">${contentType}</span>` : ''}
          </div>
        </div>
      </div>
    `;
  });
  
  return html;
}

// Arama sonuçlarını göster
function showSearchResults(searchTerm) {
  // Arama sonucu sayfasını oluştur
  const mainContent = document.querySelector('.main-content');
  
  mainContent.innerHTML = `
    <div class="category">
      <h2 class="category-title">"${searchTerm}" için arama sonuçları</h2>
      
      <div class="content-section">
        <h3 class="section-title">Filmler</h3>
        <div class="search-results">
          ${getSearchResults(searchTerm, 'film')}
        </div>
      </div>
      
      <div class="content-section">
        <h3 class="section-title">Diziler</h3>
        <div class="search-results">
          ${getSearchResults(searchTerm, 'dizi')}
        </div>
      </div>
      
      <div class="content-section">
        <h3 class="section-title">Animeler</h3>
        <div class="search-results">
          ${getSearchResults(searchTerm, 'anime')}
        </div>
      </div>
    </div>
  `;
  
  // Arama sonuçları için event listenerları kur
  setupContentCards();
}

// Demo arama sonuçları
function getSearchResults(searchTerm, type) {
  let results = '';
  const types = {
    'film': ['Film 1', 'Film 3', 'Film 5', 'Aksiyon Filmi', 'Macera Filmi'],
    'dizi': ['Dizi 2', 'Dizi 4', 'Gizem Dizisi', 'Aksiyon Dizisi'],
    'anime': ['Anime 1', 'Anime 3', 'Anime 5', 'Aksiyon Animesi']
  };
  
  const filteredResults = types[type].filter(item => 
    item.toLowerCase().includes(searchTerm)
  );
  
  if (filteredResults.length === 0) {
    return '<div class="no-results">Sonuç bulunamadı</div>';
  }
  
  filteredResults.forEach((item, index) => {
    results += `<div class="content-card" data-id="${index + 100}">${item}</div>`;
  });
  
  return results;
}

// Ayarlar sayfası için özel işlevler
function setupSettingsPage() {
  // Tema değiştirme butonları
  const themeButtons = document.querySelectorAll('.theme-button');
  
  if (themeButtons.length) {
    themeButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Aktif sınıfını tümünden kaldır
        themeButtons.forEach(btn => btn.classList.remove('active'));
        // Tıklanan butona aktif sınıfı ekle
        button.classList.add('active');
        
        // Tema değiştir
        const theme = button.getAttribute('data-theme');
        console.log(`Tema değiştirildi: ${theme}`);
        
        // Burada tema değiştirme işlemi yapılacak
      });
    });
  }
  
  // Veri yönetimi butonları
  const dataButtons = document.querySelectorAll('.settings-button');
  
  if (dataButtons.length) {
    dataButtons.forEach(button => {
      button.addEventListener('click', () => {
        console.log(`${button.textContent} işlemi başlatıldı`);
        
        // Burada veri dışa/içe aktarma işlemleri yapılacak
      });
    });
  }
}

// İçerik kartına içeriği ekle
function addContent(contentId, contentType, contentTitle) {
  if (window.apiService && window.apiService.addToWatchlist) {
    window.apiService.addToWatchlist(contentId, contentType, 'to-watch')
      .then(result => {
        if (result) {
          // Başarıyla eklendi, bildirim göster
          console.log(`"${contentTitle}" izleme listenize eklendi.`);
          
          // Modal'ı kapat
          const addForm = document.querySelector('.add-form');
          if (addForm) {
            addForm.parentElement.remove();
          }
        }
      })
      .catch(error => {
        console.error('İçerik ekleme hatası:', error);
      });
  }
}

// Arama yap
async function getSearchResults(searchTerm, type = 'all') {
  try {
    // Yükleniyor göster
    showLoading('Aranıyor...');
    
    // API servisinin varlığını kontrol et
    if (window.apiService) {
      console.log(`"${searchTerm}" için ${type} türünde arama yapılıyor...`);
      
      // API'den sonuçları al
      const results = await window.apiService.searchContent(searchTerm, type);
      
      // Yükleniyor gizle
      hideLoading();
      
      return results;
    } else {
      console.error('API servisi bulunamadı!');
      hideLoading();
      return { items: [] };
    }
  } catch (error) {
    console.error('Arama hatası:', error);
    hideLoading();
    return { items: [] };
  }
} 